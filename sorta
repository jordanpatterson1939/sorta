#! /usr/bin/env python3


import os
import re
import time
import json
import shutil
import argparse

home = os.path.expanduser('~')
downloads = os.path.join(home,'Downloads')
documents = os.path.join(home,'Documents')
desktop = os.path.join(home,'Desktop')

class Category:
    def __init__(self,name,keywords=[]):
        self.name = name
        self.keywords = keywords

    def add_keyword(self,keyword):
        if keyword not in self.keywords:
            self.keywords.append(keyword)

    def dict(self):
        return self.__dict__

    def match(self,filename):
        #returns bool indicating whether or not a keyword is present in filename
        pass

    def haskeyword(self,keyword):
        return keyword in self.keywords
    
    def save(self):
        home_dir = os.path.expanduser('~')
        filename = 'categories.json'
        path = os.path.join(home_dir,filename)
        with open(path,'r') as inp:
            cats = json.load(inp)
        cats[self.name] = self.dict()
        saveCategories(cats)

    def addfile(self,filename,parent_dir):
        pass

def loadCategory(name):
    if not categoryExists(name):
        print("Attempt to retrieve category has failed. ERROR: Category does not exist. Aborting...")
        exit(1)
    home_dir = os.path.expanduser('~')
    filename = 'categories.json'
    path = os.path.join(home_dir,filename)
    with open(path,'r') as inp:
        cat = json.load(inp)[name]
    obj = Category(cat['name'],cat['keywords'])
    return obj

def categoryExists(name):
    home_dir = os.path.expanduser('~')
    filename = 'categories.json'
    path = os.path.join(home_dir,filename)
    with open(path,'r') as inp:
        cats = json.load(inp)
    return name in cats
    

def loadCategories():
    home_dir = os.path.expanduser('~')
    filename = 'categories.json'
    try:
        path = os.path.join(home_dir,filename)
        if not os.path.exists(path):
            print("No categories were added. Try using -c to add a category so you can start grouping related files.")
            exit(1)
        with open(path,'r') as inp:
            cats = json.load(inp)
        categories = []
        for c in cats:
            cat = Category(cats[c]['name'],cats[c]['keywords'])
            categories.append(cat)
        return categories
    except Exeception as e:
        print(e)

def saveCategories(categories):
    home_dir = os.path.expanduser('~')
    filename = 'categories.json'
    try:
        category_dict = {}
        #handle each case; list, dict or single category object
        if type(categories) is list:
            for c in categories:
                category_dict[c.name] = c.dict()
            obj = {"categories":category_dict}
        elif type(categories) is dict:
            category_dict = categories
        elif type(categories) is Category:
            category_dict[categories.name] = categories.dict()
            
        jsonstr = json.dumps(category_dict, indent = 4)
        path = os.path.join(home_dir,filename)
        with open(path,'w') as out:
            out.write(jsonstr)
            
    except Exception as e:
        print(e)
    

class FileType:
    def __init__(self,folder,regex):
        self.folder = folder
        self.regex = regex

    def match(self,filename):
        for r in self.regex:
            if re.search(r,filename):
                return True
        return False

    def save(self,filename,parent_dir,group_dir):
        source = os.path.join(parent_dir,filename)
        group_dir = os.path.join(parent_dir,group_dir)
        target = os.path.join(group_dir,self.folder)
        destination = os.path.join(target,filename)
        #make the group folder if it doesn't exist
        if not os.path.exists(group_dir):
            os.mkdir(group_dir)

        if not os.path.exists(target):
            os.mkdir(target)
       
         #move file
        shutil.move(source,destination)

class Group:
    def __init__(self,filetypes,directory):
        self.filetypes = filetypes
        self.directory = directory

def getfiles(directory):
    files = []
    li = os.listdir(directory)
    for f in li:
        if os.path.isfile(os.path.join(directory,f)):
            files.append(f)
    return files

def cleanup(groups,directories):
    for g in groups:
        for d in directories:
            files = getfiles(d)
            for f in files:
                for filetype in g.filetypes:
                    if filetype.match(f):
                        filetype.save(f,d,g.directory)
                        break
    #account for files without extensions(executables)
    for d in directories:
        files = getfiles(d)
        target_folder = os.path.join(d,'Executables')
        for f in files:
            if '.' not in f:
                if not os.path.exists(target_folder):
                    os.mkdir(target_folder)
                source = os.path.join(d,f)
                destination = os.path.join(target_folder,f)
                shutil.move(source,destination)

def main():
    document_types = []
    picture_types = []
    audio_types = []
    video_types = []
    coding_types = []

    pdf_ft = FileType('PDF',['\.pdf$'])
    jpg_ft = FileType('JPG',['\.jpg$','\.jpeg$'])
    mp3_ft = FileType('MP3',['\.mp3$'])
    golang_ft = FileType('Golang',['\.go$'])
    python_ft = FileType('Python',['\.py$'])
    epub_ft = FileType('Epub(Ebooks)',['\.epub$'])
    html_ft = FileType('HTML',['\.html$'])
    json_ft = FileType('JSON',['\.json$'])
    text_ft = FileType('Text',['\.txt$'])
    mp4_ft = FileType('MP4',['\.mp4$'])
    png_ft = FileType('PNG',['\.png$'])
    webp_ft = FileType('WEBP',['\.webp$'])
  
   
    document_types.append(pdf_ft)
    picture_types.append(jpg_ft)
    audio_types.append(mp3_ft)
    document_types.append(epub_ft)
    coding_types.append(python_ft)
    coding_types.append(golang_ft)
    coding_types.append(html_ft)
    coding_types.append(json_ft)
    document_types.append(text_ft)
    video_types.append(mp4_ft)
    picture_types.append(png_ft)
    picture_types.append(webp_ft)    

    document_group = Group(document_types,'Documents')
    picture_group = Group(picture_types,'Pictures')
    audio_group = Group(audio_types,'Audio')
    video_group = Group(video_types,'Video')
    coding_group = Group(coding_types,'Code')

    groups = [document_group, picture_group, audio_group,video_group,coding_group]
    directories = [downloads,desktop,documents]    
    
    parser = argparse.ArgumentParser()
    parser.add_argument("-b","--background",help="Runs sorta indefinitely",action="store_true")
    parser.add_argument("-d","--directory",help="Run sorta on a single directory",action="store_true")
    parser.add_argument("-i","--interval",type=int,help="how frequently you want sorta to cleanup your folders, in minutes")
   
    args = parser.parse_args()

    if args.background:
        print("Running sorty in the background.")
        interval = 30
        path = ''

        if args.interval:
            interval = args.interval
        else:
            print("Interval not set. Using default {0} minutes.".format(interval))

        if args.directory:
            path=input("Enter directory: ")
            if not os.path.exists(path):
                print("That path does not exists. Aborting.")
                exit(1)
            else:
                print(f'Cleaning up {path} every {interval} minutes.')
                directories = [path]
        else:
            print("Cleaning general directories(downloads,documents,desktop) every {0} minutes.".format(interval))
    
        print("Press Ctrl+c to exit. . .")
        try:        
            while True:
                print("Cleaning up. . .")
                cleanup(groups,directories)
                time.sleep(60*interval)
        except KeyboardInterrupt:
            print("Exitting.")
        
    elif args.directory:
        path=input("Enter directory: ")
        if not os.path.exists(path):
            print("That path does not exist. Aborting.")
        else:
            cleanup(groups,[path])
    else:
        cleanup(groups,directories)

if __name__=='__main__':
    #main()
    #mycat = Category("Machine Learning",["neural network","ai","artifical intelligence","deep learning","nlp","natural language processing","machine learning","data science"])
    #saveCategories([mycat])
    #categories = loadCategories()  
    #for category in categories:
    #    print(category.dict())
    #cat = loadCategory('Machine Learning')
    #print(cat.dict())
    #ml = 'Machine Learning'
    #electronics = 'Electronics'
    #cts = [ml,electronics]
    #for c in cts:
    #    print(f'{c} category exists: ',categoryExists(c))

    #newcat = Category('Electronics',['electronics','raspberry pi','arduino','raspberry','electricity','circuits'])
    #newcat.save()

    cat = loadCategory('Electronics')
    cat.add_keyword('robot')
    cat.add_keyword('sensors')
    cat.add_keyword('circuit board')
    cat.add_keyword('wiring diagram')
    cat.add_keyword('pi zero')
    cat.save()
    
